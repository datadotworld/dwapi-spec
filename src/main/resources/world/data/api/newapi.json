{
  "swagger": "2.0",
  "info": {
    "description": "This is the internal version of the Swagger API generated from the Java\n                                    resource objects and is not visible to external users.  It must be a superset\n                                    of the more user-friendly Swagger API maintained manually at\n                                    https://github.com/datadotworld/dwapi-spec.",
    "version": "0.21.0",
    "title": "data.world Public API (internal version)"
  },
  "host": "api.data.world",
  "basePath": "/v0",
  "tags": [
    {
      "name": "DOIs"
    },
    {
      "name": "datasets"
    },
    {
      "name": "describe"
    },
    {
      "name": "download"
    },
    {
      "name": "insights"
    },
    {
      "name": "metadata"
    },
    {
      "name": "partners"
    },
    {
      "name": "projects"
    },
    {
      "name": "queries"
    },
    {
      "name": "search"
    },
    {
      "name": "sparql"
    },
    {
      "name": "sql"
    },
    {
      "name": "streams"
    },
    {
      "name": "uploads"
    },
    {
      "name": "user"
    },
    {
      "name": "users"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/datasets/search": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Search for datasets.",
        "description": "",
        "operationId": "search",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved dataset",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Gets datasets by owner.",
        "description": "",
        "operationId": "getDatasetsByOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved dataset",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Create a new dataset.",
        "description": "",
        "operationId": "createDataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateDatasetResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Retrieve a dataset.",
        "description": "",
        "operationId": "getDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved dataset",
            "schema": {
              "$ref": "#/definitions/DatasetSummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "datasets"
        ],
        "summary": "Replace an existing dataset or create a new dataset",
        "description": "",
        "operationId": "replaceDataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset replaced successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "datasets"
        ],
        "summary": "Delete a dataset.",
        "description": "",
        "operationId": "deleteDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "datasets"
        ],
        "summary": "Update an existing dataset.",
        "description": "",
        "operationId": "patchDataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/dois/{doi}": {
      "put": {
        "tags": [
          "DOIs"
        ],
        "summary": "Create dataset DOI",
        "description": "",
        "operationId": "addDoi",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "doi",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DOI successfully added to dataset.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DOIs"
        ],
        "summary": "Delete dataset DOI",
        "description": "",
        "operationId": "deleteDoi",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "doi",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DOI successfully removed from dataset.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/files": {
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Add or update files for a dataset.",
        "description": "",
        "operationId": "addFilesBySource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileBatchUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset successfully updated with new sources. Sync in progress.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "datasets"
        ],
        "summary": "Delete files for a dataset.",
        "description": "",
        "operationId": "deleteFilesAndSyncSources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset file(s) have been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/files/{file}": {
      "delete": {
        "tags": [
          "datasets"
        ],
        "summary": "Delete a single file for a dataset.",
        "description": "",
        "operationId": "deleteFileAndSyncSource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "path",
            "description": "Filename",
            "required": true,
            "type": "string",
            "maxItems": 128,
            "minItems": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset file(s) have been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/queries": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Retrieve queries saved in a dataset.",
        "description": "",
        "operationId": "getDatasetQueries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved queries saved in a dataset.",
            "schema": {
              "$ref": "#/definitions/PaginatedQueryResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Create a saved query for a dataset",
        "description": "",
        "operationId": "createSavedQuery",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateQueryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created saved query.",
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/queries/{queryId}": {
      "put": {
        "tags": [
          "datasets"
        ],
        "summary": "Update a saved query for a dataset",
        "description": "",
        "operationId": "updateSavedQuery",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated saved query.",
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "datasets"
        ],
        "summary": "Delete a saved query for a dataset",
        "description": "",
        "operationId": "deleteSavedQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted saved query.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/sync": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Fetch latest files from source and update dataset — via GET, for convenience.",
        "description": "",
        "operationId": "syncViaGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync started.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Fetch latest files from source and update dataset.",
        "description": "",
        "operationId": "sync",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Sync started.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "429": {
            "description": "Too many requests",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/v/{versionId}": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Retrieve a dataset by version.",
        "description": "",
        "operationId": "getDatasetByVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved dataset version",
            "schema": {
              "$ref": "#/definitions/DatasetSummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/datasets/{owner}/{id}/v/{versionId}/dois/{doi}": {
      "put": {
        "tags": [
          "DOIs"
        ],
        "summary": "Create dataset version DOI",
        "description": "",
        "operationId": "addVersionDoi",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "doi",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DOI successfully added to dataset version.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "DOIs"
        ],
        "summary": "Delete dataset version DOI",
        "description": "",
        "operationId": "deleteVersionDoi",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "doi",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "DOI successfully removed from dataset version.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/describe": {
      "get": {
        "tags": [
          "describe"
        ],
        "summary": "SPARQL DESCRIBE query",
        "description": "This endpoint executes a SPARQL DESCRIBE query, given an IRI.\n.",
        "operationId": "queryViaGet",
        "produces": [
          "text/tab-separated-values",
          "application/rdf+json",
          "application/rdf+xml",
          "text/csv",
          "application/sparql-results+xml",
          "text/turtle",
          "application/sparql-results+json"
        ],
        "parameters": [
          {
            "name": "iri",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uri"
          },
          {
            "name": "namespace",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/download/{owner}/{id}": {
      "get": {
        "tags": [
          "download"
        ],
        "summary": "Download dataset",
        "description": "This endpoint will return a .zip of all files within the dataset.\"",
        "operationId": "downloadDataset",
        "produces": [
          "application/zip"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string",
            "maxItems": 32,
            "minItems": 0
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/file_download/{owner}/{id}/{file}": {
      "get": {
        "tags": [
          "download"
        ],
        "summary": "Download file",
        "description": "This endpoint will return the file from the latest dataset version.",
        "operationId": "downloadFile",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string",
            "maxItems": 32,
            "minItems": 0
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/insights/{projectOwner}/{projectId}": {
      "get": {
        "tags": [
          "insights"
        ],
        "summary": "Get insights for project.",
        "description": "",
        "operationId": "getInsightsForProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectOwner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project insights",
            "schema": {
              "$ref": "#/definitions/PaginatedInsightResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "insights"
        ],
        "summary": "Create new insight for a project.",
        "description": "",
        "operationId": "createInsight",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectOwner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsightCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateInsightResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/insights/{projectOwner}/{projectId}/{id}": {
      "get": {
        "tags": [
          "insights"
        ],
        "summary": "Retrieve a project insight.",
        "description": "",
        "operationId": "getInsight",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectOwner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved insight",
            "schema": {
              "$ref": "#/definitions/InsightSummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "insights"
        ],
        "summary": "Replace an existing insight or create a new insight.",
        "description": "",
        "operationId": "replaceInsight",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectOwner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsightPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight replaced successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "insights"
        ],
        "summary": "Delete an insight.",
        "description": "",
        "operationId": "deleteInsight",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectOwner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Insight has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "insights"
        ],
        "summary": "Update an existing insight.",
        "description": "",
        "operationId": "updateInsight",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectOwner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/InsightPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Insight updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/insights/{projectOwner}/{projectId}/{id}/v/{versionId}": {
      "get": {
        "tags": [
          "insights"
        ],
        "summary": "Retrieve a project insight by version.",
        "description": "",
        "operationId": "getInsightByVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "projectOwner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "projectId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved insight by version.",
            "schema": {
              "$ref": "#/definitions/InsightSummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/metadata/analysis/{owner}": {
      "get": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Gets metadata analysis by owner.",
        "description": "",
        "operationId": "getMetadataAnalysisByOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata analysis",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Create a new analysis metadata.",
        "description": "",
        "operationId": "createCatalogAnalysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogAnalysisRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis Metadata created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateDatasetResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/metadata/analysis/{owner}/{id}": {
      "get": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Get an individual metadata analysis",
        "description": "",
        "operationId": "getMetadataAnalysis",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetadataResourceDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Replace an existing analysis or create a new analysis",
        "description": "",
        "operationId": "replaceCatalogAnalysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogAnalysisRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis replaced successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Delete an Analysis.",
        "description": "",
        "operationId": "deleteCatalogAnalysis",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "metadata/analysis"
        ],
        "summary": "Update an existing analysis.",
        "description": "",
        "operationId": "patchCatalogAnalysis",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogAnalysisRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Analysis updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/metadata/glossary/{owner}": {
      "get": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Gets metadata glossary by owner.",
        "description": "",
        "operationId": "getMetadataGlossaryByOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved metadata glossary",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Create a new glossary metadata.",
        "description": "",
        "operationId": "createCatalogGlossary",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogGlossaryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary Metadata created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateDatasetResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/metadata/glossary/{owner}/{id}": {
      "get": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Get an individual metadata glossary",
        "description": "",
        "operationId": "getMetadataGlossary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/MetadataResourceDto"
            }
          },
          "400": {
            "description": "Bad Request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Replace an existing glossary or create a new glossary",
        "description": "",
        "operationId": "replaceCatalogGlossary",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogGlossaryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary replaced successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Delete an Glossary.",
        "description": "",
        "operationId": "deleteCatalogGlossary",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "metadata/glossary"
        ],
        "summary": "Update an existing glossary.",
        "description": "",
        "operationId": "patchCatalogGlossary",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CatalogGlossaryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Glossary updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/metadata/relationships/{owner}": {
      "post": {
        "tags": [
          "metadata/relationships"
        ],
        "summary": "Creates a relationship between two catalog resources",
        "description": "",
        "operationId": "createRelationship",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RelationshipCreateOrDeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EditActivitiesResultDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/metadata/relationships/{owner}/delete": {
      "post": {
        "tags": [
          "metadata/relationships"
        ],
        "summary": "Deletes a relationship between two catalog resources",
        "description": "",
        "operationId": "deleteRelationship",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RelationshipCreateOrDeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EditActivitiesResultDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/metadata/relationships/{owner}/resource/{resourceId}": {
      "post": {
        "tags": [
          "metadata/relationships"
        ],
        "summary": "Get resources (data, analysis, and glossaries) that are related to a resource",
        "description": "",
        "operationId": "getRelationships",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RelationshipGetRequest"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/metadata/relationships/{owner}/table/{sourceId}/{tableId}": {
      "post": {
        "tags": [
          "metadata/relationships"
        ],
        "summary": "Get resources (data, analysis, and glossaries) that are related to a table",
        "description": "",
        "operationId": "getTableRelationships",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "tableId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/RelationshipGetTableRequest"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedMetadataResourceResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/partners/stitchdata/uploads/{account}": {
      "head": {
        "tags": [
          "partners"
        ],
        "summary": "Check whether user credentials allow write access to the specified data.world account.",
        "description": "",
        "operationId": "stitchAuthorized",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/partners/stitchdata/uploads/{account}/{integrationName}": {
      "post": {
        "tags": [
          "partners"
        ],
        "summary": "Create a target dataset if it doesn't exist already.",
        "description": "",
        "operationId": "stitchCreateDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "integrationName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DatasetIdentifierResponse"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/partners/stitchdata/uploads/{account}/{integrationName}/manifest": {
      "post": {
        "tags": [
          "partners"
        ],
        "summary": "Notify data.world that new files have been uploaded to S3.",
        "description": "",
        "operationId": "stitchUploadManifest",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "integrationName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/DatasetIdentifierResponse"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/projects/{owner}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Gets projects by owner.",
        "description": "",
        "operationId": "getProjectsByOwner",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project",
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a new project.",
        "description": "",
        "operationId": "createProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project created successfully.",
            "schema": {
              "$ref": "#/definitions/CreateProjectResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/projects/{owner}/{id}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Retrieve a project.",
        "description": "",
        "operationId": "getProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project",
            "schema": {
              "$ref": "#/definitions/ProjectSummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Replace an existing project or create a new project.",
        "description": "",
        "operationId": "replaceProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project replaced successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a project.",
        "description": "",
        "operationId": "deleteProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Project has been successfully deleted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "projects"
        ],
        "summary": "Update an existing project.",
        "description": "",
        "operationId": "patchProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/projects/{owner}/{id}/linkedDatasets/{linkedDatasetOwner}/{linkedDatasetId}": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Link a dataset to a project.",
        "description": "",
        "operationId": "addLinkedDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedDatasetOwner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedDatasetId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset linked successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Remove a linked dataset from a project.",
        "description": "",
        "operationId": "removeLinkedDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedDatasetOwner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "linkedDatasetId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Dataset linked successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/projects/{owner}/{id}/queries": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Retrieve queries saved in a project.",
        "description": "",
        "operationId": "getProjectQueries",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved queries saved in a project.",
            "schema": {
              "$ref": "#/definitions/PaginatedQueryResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "projects"
        ],
        "summary": "Create a saved query for a project",
        "description": "",
        "operationId": "createSavedQuery",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CreateQueryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully created saved query.",
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/projects/{owner}/{id}/queries/{queryId}": {
      "put": {
        "tags": [
          "projects"
        ],
        "summary": "Update a saved query for a project",
        "description": "",
        "operationId": "updateSavedQuery",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/QueryPutRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully updated saved query.",
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "projects"
        ],
        "summary": "Delete a saved query for a project",
        "description": "",
        "operationId": "deleteSavedQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "queryId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted saved query.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/projects/{owner}/{id}/v/{versionId}": {
      "get": {
        "tags": [
          "projects"
        ],
        "summary": "Retrieve a project by version.",
        "description": "",
        "operationId": "getProjectByVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved project by version",
            "schema": {
              "$ref": "#/definitions/ProjectSummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/queries/{id}": {
      "get": {
        "tags": [
          "queries"
        ],
        "summary": "Retrieve a query definition.",
        "description": "",
        "operationId": "getQuery",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a query definition.",
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/queries/{id}/results": {
      "get": {
        "tags": [
          "queries"
        ],
        "summary": "Execute a query.",
        "description": "",
        "operationId": "executeQuery",
        "produces": [
          "application/json",
          "text/csv",
          "application/sparql-results+xml",
          "application/sparql-results+json",
          "text/tab-separated-values",
          "application/rdf+json",
          "text/turtle",
          "application/rdf+xml",
          "application/json-l",
          "application/x-ndjson",
          "application/trig"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeTableSchema",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully executed a query.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "queries"
        ],
        "summary": "Execute a query.",
        "description": "",
        "operationId": "executeQueryWithPost",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json",
          "text/csv",
          "application/sparql-results+xml",
          "application/sparql-results+json",
          "text/tab-separated-values",
          "application/rdf+json",
          "text/turtle",
          "application/rdf+xml",
          "application/json-l",
          "application/x-ndjson",
          "application/trig"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/SavedQueryExecutionRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully executed a query.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/queries/{id}/v/{versionId}": {
      "get": {
        "tags": [
          "queries"
        ],
        "summary": "Retrieve a versioned query definition.",
        "description": "",
        "operationId": "getQueryVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "versionId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved a version query definition.",
            "schema": {
              "$ref": "#/definitions/QuerySummaryResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/search/resources": {
      "post": {
        "tags": [
          "search"
        ],
        "summary": "Simple search on resources.",
        "description": "",
        "operationId": "searchResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SimpleSearchRequest"
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "from",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedSearchResultsDto"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/sparql/{owner}/{id}": {
      "get": {
        "tags": [
          "sparql"
        ],
        "summary": "SPARQL query (via GET)",
        "description": "This endpoint executes SPARQL queries against a dataset.\nNew to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .",
        "operationId": "queryViaGet",
        "produces": [
          "text/tab-separated-values",
          "application/rdf+json",
          "application/rdf+xml",
          "text/csv",
          "application/sparql-results+xml",
          "text/turtle",
          "application/sparql-results+json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string",
            "maxItems": 32,
            "minItems": 0
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "sparql"
        ],
        "summary": "SPARQL query",
        "description": "his endpoint executes SPARQL queries against a dataset.\nNew to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .",
        "operationId": "queryViaUrlEncodedPost",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "produces": [
          "text/tab-separated-values",
          "application/rdf+json",
          "application/rdf+xml",
          "text/csv",
          "application/sparql-results+xml",
          "text/turtle",
          "application/sparql-results+json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string",
            "maxItems": 32,
            "minItems": 0
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "query",
            "in": "formData",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/sql/{owner}/{id}": {
      "get": {
        "tags": [
          "sql"
        ],
        "summary": "SQL query (via GET)",
        "description": "This endpoint executes SQL queries against a dataset.\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId": "sqlGet",
        "produces": [
          "application/x-ndjson",
          "application/json",
          "text/csv",
          "application/json-l"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string",
            "maxItems": 32,
            "minItems": 0
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeTableSchema",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "post": {
        "tags": [
          "sql"
        ],
        "summary": "SQL query",
        "description": "This endpoint executes SQL queries against a dataset.\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId": "sqlPostWithJsonRequest",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/x-ndjson",
          "application/json",
          "text/csv",
          "application/json-l"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string",
            "maxItems": 32,
            "minItems": 0
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SqlQueryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The request has succeeded."
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/streams/{owner}/{id}/{streamId}": {
      "post": {
        "tags": [
          "streams"
        ],
        "summary": "Append record(s) to a stream.",
        "description": "",
        "operationId": "appendRecords",
        "consumes": [
          "application/json-l",
          "application/json",
          "application/n-triples",
          "text/turtle",
          "application/rdf+xml"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "Content-Type",
            "in": "header",
            "required": false,
            "type": "string",
            "default": ""
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamsResource"
            }
          }
        ],
        "responses": {
          "202": {
            "description": "Record(s) accepted.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/streams/{owner}/{id}/{streamId}/records": {
      "delete": {
        "tags": [
          "streams"
        ],
        "summary": "Delete all records uploaded to the stream.",
        "description": "",
        "operationId": "deleteRecords",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Stream updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/streams/{owner}/{id}/{streamId}/schema": {
      "get": {
        "tags": [
          "streams"
        ],
        "summary": "Get the configured record schema for a stream.",
        "description": "",
        "operationId": "getStreamSchema",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved stream schema.",
            "schema": {
              "$ref": "#/definitions/StreamSchema"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "patch": {
        "tags": [
          "streams"
        ],
        "summary": "Update the record schema of a stream.",
        "description": "",
        "operationId": "patchStreamSchema",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "streamId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StreamSchemaPatchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Stream updated successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/uploads/{owner}/{id}/files": {
      "post": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload one or more files to a dataset.",
        "description": "Swagger clients will limit this method of upload to one file at a time. Other HTTP clients capable of making multipart/form-data requests can be used to upload multiple files in a single request.",
        "operationId": "uploadFiles",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "expandArchives",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Multipart-encoded file contents",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "File(s) uploaded successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "413": {
            "description": "Upload too large",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/uploads/{owner}/{id}/files/{file}": {
      "put": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload a file to a dataset.",
        "description": "This method of upload is not supported by Swagger clients. Other HTTP clients can be used to supply the contents of the file directly in the body of the request",
        "operationId": "uploadFile",
        "consumes": [
          "application/octet-stream",
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "file",
            "in": "path",
            "description": "Filename",
            "required": true,
            "type": "string",
            "maxItems": 128,
            "minItems": 1
          },
          {
            "name": "expandArchive",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "File uploaded successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "413": {
            "description": "Upload too large",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user data.",
        "description": "",
        "operationId": "getUserData",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "User data returned.",
            "schema": {
              "$ref": "#/definitions/UserDataResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/datasets/contributing": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch datasets to which the requesting user is a contributor",
        "description": "",
        "operationId": "fetchContributingDatasets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/datasets/liked": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch datasets the requesting user likes",
        "description": "",
        "operationId": "fetchLikedDatasets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/datasets/own": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch datasets the requesting user owns",
        "description": "",
        "operationId": "fetchDatasets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/organizations": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch organizations to which the requesting user is a member",
        "description": "",
        "operationId": "fetchOrganizations",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedUserResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/projects/contributing": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch projects to which the requesting user is a contributor",
        "description": "",
        "operationId": "fetchContributingProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/projects/liked": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch projects the requesting user likes",
        "description": "",
        "operationId": "fetchLikedProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/projects/own": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch projects the requesting user owns",
        "description": "",
        "operationId": "fetchProjects",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/PaginatedProjectResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/webhooks": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Return existing webhook subscriptions.",
        "description": "",
        "operationId": "getWebhooks",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "next",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscriptions returned successfully.",
            "schema": {
              "$ref": "#/definitions/PaginatedSubscriptionResults"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/webhooks/datasets/{owner}/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch a webhook subscription for a dataset.",
        "description": "",
        "operationId": "getForDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Create a webhook subscription for a dataset including objects owned by it.",
        "description": "",
        "operationId": "subscribeToDataset",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription created successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a webhook subscription for a dataset.",
        "description": "",
        "operationId": "unsubscribeFromDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription deleted successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/webhooks/projects/{owner}/{id}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch a webhook subscription for a project.",
        "description": "",
        "operationId": "getForProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Create a webhook subscription for a project including objects owned by it.",
        "description": "",
        "operationId": "subscribeToProject",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription created successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a webhook subscription for a project.",
        "description": "",
        "operationId": "unsubscribeFromProject",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription deleted successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/user/webhooks/users/{account}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Fetch a webhook subscription for a user account.",
        "description": "",
        "operationId": "getForUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription retrieved successfully.",
            "schema": {
              "$ref": "#/definitions/Subscription"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Create a webhook subscription for a user account including objects owned by it.",
        "description": "",
        "operationId": "subscribeToUser",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SubscriptionCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription created successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete a webhook subscription for a user account.",
        "description": "",
        "operationId": "unsubscribeFromUser",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook subscription deleted successfully.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    },
    "/users/{account}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get a user account info.",
        "description": "",
        "operationId": "getAccount",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "account",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "User data returned.",
            "schema": {
              "$ref": "#/definitions/UserDataResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          }
        },
        "security": [
          {
            "oauth": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "oauth": {
      "type": "oauth2",
      "authorizationUrl": "https://data.world/oauth/authorize",
      "tokenUrl": "https://data.world/oauth/access_token",
      "flow": "accessCode",
      "scopes": {
        "user_api_read": "Permission to read the data and metadata contained in datasets and data projects to which you have access.",
        "user_api_write": "Permission to update the data and metadata contained in datasets and data projects to which you have write access.",
        "user_api_admin": "Permission to access administrative features, including permission to delete datasets and data projects."
      }
    }
  },
  "definitions": {
    "AgentHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "avatarUrl": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "AnalysisImage": {
      "type": "object",
      "properties": {
        "externalUrl": {
          "type": "string"
        }
      }
    },
    "AssetStatus": {
      "type": "object",
      "properties": {
        "assetStatusLabel": {
          "type": "string"
        },
        "dispositionLabel": {
          "type": "string"
        }
      }
    },
    "CatalogAnalysisHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "analysisid": {
          "type": "string"
        },
        "assetStatus": {
          "$ref": "#/definitions/AssetStatus"
        },
        "catalogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogId"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "entryTypeHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryType"
          }
        },
        "entryTypeLabel": {
          "type": "string"
        },
        "previewImage": {
          "$ref": "#/definitions/AnalysisImage"
        },
        "referent": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogAnalysisRequest": {
      "type": "object",
      "properties": {
        "catalogs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        }
      }
    },
    "CatalogBusinessTermHydrationDto": {
      "type": "object",
      "properties": {
        "abstract_": {
          "type": "string"
        },
        "agentid": {
          "type": "string"
        },
        "assetStatus": {
          "$ref": "#/definitions/AssetStatus"
        },
        "businessTermid": {
          "type": "string"
        },
        "catalogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogId"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "entryTypeHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryType"
          }
        },
        "entryTypeLabel": {
          "type": "string"
        },
        "referent": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogColumnHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "assetStatus": {
          "$ref": "#/definitions/AssetStatus"
        },
        "columnid": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "entryTypeHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryType"
          }
        },
        "entryTypeLabel": {
          "type": "string"
        },
        "referent": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogConceptHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "altLabel": {
          "type": "string"
        },
        "conceptHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ConceptEntry"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "iri": {
          "type": "string"
        },
        "prefLabel": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogGlossaryRequest": {
      "type": "object",
      "properties": {
        "catalogs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        }
      }
    },
    "CatalogHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "catalogid": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "sources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SourceId"
          }
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CatalogId": {
      "type": "object",
      "required": [
        "collectionId",
        "owner"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "collectionId": {
          "type": "string"
        }
      }
    },
    "CatalogTableHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "catalogs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogId"
          }
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "description": {
          "type": "string"
        },
        "entryTypeHierarchy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EntryType"
          }
        },
        "entryTypeLabel": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "referent": {
          "type": "string"
        },
        "sourceId": {
          "$ref": "#/definitions/SourceId"
        },
        "tableid": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "ConceptEntry": {
      "type": "object",
      "properties": {
        "altLabel": {
          "type": "string"
        },
        "iri": {
          "type": "string"
        },
        "prefLabel": {
          "type": "string"
        }
      }
    },
    "CreateDatasetResponse": {
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "message": {
          "type": "string",
          "minLength": 0,
          "maxLength": 256
        },
        "uri": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "CreateInsightResponse": {
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "message": {
          "type": "string",
          "minLength": 0,
          "maxLength": 256
        },
        "uri": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "CreateProjectResponse": {
      "type": "object",
      "required": [
        "uri"
      ],
      "properties": {
        "message": {
          "type": "string",
          "minLength": 0,
          "maxLength": 256
        },
        "uri": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "CreateQueryRequest": {
      "type": "object",
      "required": [
        "content",
        "language",
        "name"
      ],
      "properties": {
        "language": {
          "type": "string",
          "enum": [
            "SPARQL",
            "SQL"
          ]
        },
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 128
        },
        "content": {
          "type": "string"
        },
        "published": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "DatabaseMetadataSpecDto": {
      "type": "object",
      "properties": {
        "tableSpecs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableMetadataSpecDto"
          },
          "maxItems": 100,
          "minItems": 0
        }
      }
    },
    "DatabaseSourceReference": {
      "type": "object",
      "required": [
        "id",
        "owner"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "DatasetCreateRequest": {
      "type": "object",
      "required": [
        "title",
        "visibility"
      ],
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "CC-BY-IGO",
            "CC-BY 3.0",
            "CC-BY 3.0 AU",
            "CC-BY 3.0 IGO",
            "CC-BY-SA",
            "CC-BY-SA 3.0",
            "CDLA-Sharing-1.0",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-ND 3.0",
            "CC-BY 3.0 NZ",
            "CC-BY-NC 3.0",
            "CC-BY-SA 3.0",
            "CC BY-NC-ND",
            "CC-BY-NC-SA 3.0",
            "CC-BY-SA 3.0 NZ",
            "CC-BY-NC-SA 3.0 NZ",
            "CC-BY-NC 3.0 NZ",
            "CC-BY-NC-ND-NZ-3.0",
            "CC BY-NC-SA",
            "CC-BY-NC-SA 3.0",
            "Italian-ODL",
            "MIT License",
            "OGL",
            "OGL-Canada",
            "OGL-Nova Scotia",
            "OGL-UK",
            "OSODL",
            "ODC-BY",
            "ODC-ODbL",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        }
      }
    },
    "DatasetHydrationDto": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "datasetid": {
          "type": "string"
        },
        "headline": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "project": {
          "type": "boolean",
          "default": false
        },
        "relationship": {
          "$ref": "#/definitions/ResourceRelationshipDto"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "userUpdated": {
          "type": "string",
          "format": "date-time"
        },
        "abstract": {
          "type": "string"
        }
      }
    },
    "DatasetIdentifier": {
      "type": "object",
      "required": [
        "id",
        "owner"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        }
      }
    },
    "DatasetIdentifierResponse": {
      "type": "object",
      "required": [
        "id",
        "owner"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "DatasetPatchRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        },
        "description": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "CC-BY-IGO",
            "CC-BY 3.0",
            "CC-BY 3.0 AU",
            "CC-BY 3.0 IGO",
            "CC-BY-SA",
            "CC-BY-SA 3.0",
            "CDLA-Sharing-1.0",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-ND 3.0",
            "CC-BY 3.0 NZ",
            "CC-BY-NC 3.0",
            "CC-BY-SA 3.0",
            "CC BY-NC-ND",
            "CC-BY-NC-SA 3.0",
            "CC-BY-SA 3.0 NZ",
            "CC-BY-NC-SA 3.0 NZ",
            "CC-BY-NC 3.0 NZ",
            "CC-BY-NC-ND-NZ-3.0",
            "CC BY-NC-SA",
            "CC-BY-NC-SA 3.0",
            "Italian-ODL",
            "MIT License",
            "OGL",
            "OGL-Canada",
            "OGL-Nova Scotia",
            "OGL-UK",
            "OSODL",
            "ODC-BY",
            "ODC-ODbL",
            "Other"
          ]
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        }
      }
    },
    "DatasetPutRequest": {
      "type": "object",
      "required": [
        "title",
        "visibility"
      ],
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "CC-BY-IGO",
            "CC-BY 3.0",
            "CC-BY 3.0 AU",
            "CC-BY 3.0 IGO",
            "CC-BY-SA",
            "CC-BY-SA 3.0",
            "CDLA-Sharing-1.0",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-ND 3.0",
            "CC-BY 3.0 NZ",
            "CC-BY-NC 3.0",
            "CC-BY-SA 3.0",
            "CC BY-NC-ND",
            "CC-BY-NC-SA 3.0",
            "CC-BY-SA 3.0 NZ",
            "CC-BY-NC-SA 3.0 NZ",
            "CC-BY-NC 3.0 NZ",
            "CC-BY-NC-ND-NZ-3.0",
            "CC BY-NC-SA",
            "CC-BY-NC-SA 3.0",
            "Italian-ODL",
            "MIT License",
            "OGL",
            "OGL-Canada",
            "OGL-Nova Scotia",
            "OGL-UK",
            "OSODL",
            "ODC-BY",
            "ODC-ODbL",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        }
      }
    },
    "DatasetSummaryResponse": {
      "type": "object",
      "required": [
        "accessLevel",
        "created",
        "id",
        "isProject",
        "owner",
        "status",
        "title",
        "updated",
        "version",
        "visibility"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "version": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dois": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Doi"
          }
        },
        "license": {
          "type": "string",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "CC-BY-IGO",
            "CC-BY 3.0",
            "CC-BY 3.0 AU",
            "CC-BY 3.0 IGO",
            "CC-BY-SA",
            "CC-BY-SA 3.0",
            "CDLA-Sharing-1.0",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-ND 3.0",
            "CC-BY 3.0 NZ",
            "CC-BY-NC 3.0",
            "CC-BY-SA 3.0",
            "CC BY-NC-ND",
            "CC-BY-NC-SA 3.0",
            "CC-BY-SA 3.0 NZ",
            "CC-BY-NC-SA 3.0 NZ",
            "CC-BY-NC 3.0 NZ",
            "CC-BY-NC-ND-NZ-3.0",
            "CC BY-NC-SA",
            "CC-BY-NC-SA 3.0",
            "Italian-ODL",
            "MIT License",
            "OGL",
            "OGL-Canada",
            "OGL-Nova Scotia",
            "OGL-UK",
            "OSODL",
            "ODC-BY",
            "ODC-ODbL",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileSummaryResponse"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "NEW",
            "INPROGRESS",
            "LOADED",
            "SYSTEMERROR"
          ]
        },
        "created": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        },
        "accessLevel": {
          "type": "string",
          "enum": [
            "NONE",
            "DISCOVER",
            "READ",
            "WRITE",
            "ADMIN"
          ]
        },
        "versionDois": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Doi"
          }
        },
        "isProject": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "Doi": {
      "type": "object",
      "required": [
        "created",
        "doi"
      ],
      "properties": {
        "doi": {
          "type": "string"
        },
        "created": {
          "type": "string"
        }
      }
    },
    "EditActivitiesResultDto": {
      "type": "object",
      "properties": {
        "activityBatchId": {
          "type": "string",
          "format": "uuid"
        },
        "timeStarted": {
          "$ref": "#/definitions/Instant"
        },
        "timeEnded": {
          "$ref": "#/definitions/Instant"
        },
        "activityResults": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EntryType": {
      "type": "object",
      "properties": {
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ErrorMessage": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "readOnly": true
        },
        "message": {
          "type": "string",
          "readOnly": true
        },
        "details": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "FileBatchUpdateRequest": {
      "type": "object",
      "properties": {
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          }
        }
      }
    },
    "FileCreateOrUpdateRequest": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "pattern": "^[^/]+$"
        },
        "source": {
          "$ref": "#/definitions/FileSourceCreateOrUpdateRequest"
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 120
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FileCreateRequest": {
      "type": "object",
      "required": [
        "name",
        "source"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "pattern": "^[^/]+$"
        },
        "source": {
          "$ref": "#/definitions/FileSourceCreateRequest"
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 120
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "FileSourceCreateOrUpdateRequest": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        },
        "method": {
          "type": "string",
          "enum": [
            "GET",
            "POST"
          ]
        },
        "requestHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestEntity": {
          "type": "string",
          "minLength": 0,
          "maxLength": 10000
        },
        "oauthToken": {
          "$ref": "#/definitions/OauthTokenReference"
        },
        "credentials": {
          "$ref": "#/definitions/WebCredentials"
        },
        "authorization": {
          "$ref": "#/definitions/WebAuthorization"
        },
        "databaseSource": {
          "$ref": "#/definitions/DatabaseSourceReference"
        },
        "databaseMetadataSpec": {
          "$ref": "#/definitions/DatabaseMetadataSpecDto"
        },
        "dataTables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/QueryExecutionDto"
          }
        },
        "expandArchive": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "FileSourceCreateRequest": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        },
        "method": {
          "type": "string",
          "enum": [
            "GET",
            "POST"
          ]
        },
        "requestHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestEntity": {
          "type": "string",
          "minLength": 0,
          "maxLength": 10000
        },
        "oauthToken": {
          "$ref": "#/definitions/OauthTokenReference"
        },
        "credentials": {
          "$ref": "#/definitions/WebCredentials"
        },
        "authorization": {
          "$ref": "#/definitions/WebAuthorization"
        },
        "databaseSource": {
          "$ref": "#/definitions/DatabaseSourceReference"
        },
        "databaseMetadataSpec": {
          "$ref": "#/definitions/DatabaseMetadataSpecDto"
        },
        "dataTables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/QueryExecutionDto"
          }
        },
        "expandArchive": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "FileSourceSummaryResponse": {
      "type": "object",
      "required": [
        "syncStatus"
      ],
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        },
        "method": {
          "type": "string",
          "enum": [
            "GET",
            "POST"
          ]
        },
        "requestHeaders": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "requestEntity": {
          "type": "string",
          "minLength": 0,
          "maxLength": 10000
        },
        "oauthToken": {
          "$ref": "#/definitions/OauthTokenReference"
        },
        "credentials": {
          "$ref": "#/definitions/WebCredentials"
        },
        "authorization": {
          "$ref": "#/definitions/WebAuthorization"
        },
        "databaseSource": {
          "$ref": "#/definitions/DatabaseSourceReference"
        },
        "databaseMetadataSpec": {
          "$ref": "#/definitions/DatabaseMetadataSpecDto"
        },
        "dataTables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/QueryExecutionDto"
          }
        },
        "expandArchive": {
          "type": "boolean",
          "default": false
        },
        "syncStatus": {
          "type": "string",
          "enum": [
            "NEW",
            "INPROGRESS",
            "OK",
            "SYSTEMERROR"
          ]
        },
        "syncSummary": {
          "type": "string"
        },
        "lastSyncStart": {
          "type": "string"
        },
        "lastSyncSuccess": {
          "type": "string"
        },
        "lastSyncFailure": {
          "type": "string"
        }
      }
    },
    "FileSummaryResponse": {
      "type": "object",
      "required": [
        "created",
        "name",
        "updated"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "pattern": "^[^/]+$"
        },
        "sizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "source": {
          "$ref": "#/definitions/FileSourceSummaryResponse"
        },
        "created": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        },
        "description": {
          "type": "string",
          "minLength": 1,
          "maxLength": 120
        },
        "labels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "InsightBody": {
      "type": "object",
      "properties": {
        "imageUrl": {
          "type": "string",
          "format": "uri"
        },
        "embedUrl": {
          "type": "string",
          "format": "uri"
        },
        "markdownBody": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        }
      }
    },
    "InsightCreateRequest": {
      "type": "object",
      "required": [
        "body",
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "sourceLink": {
          "type": "string",
          "format": "uri"
        },
        "dataSourceLinks": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          }
        },
        "thumbnail": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "InsightHydrationDto": {
      "type": "object",
      "properties": {
        "body": {
          "type": "string"
        },
        "createdBy": {
          "$ref": "#/definitions/AgentHydrationDto"
        },
        "dataset": {
          "$ref": "#/definitions/DatasetHydrationDto"
        },
        "datasetid": {
          "type": "string"
        },
        "dataSources": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          }
        },
        "description": {
          "type": "string"
        },
        "insightid": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string",
          "format": "uri"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "InsightPatchRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "description": {
          "type": "string"
        },
        "sourceLink": {
          "type": "string",
          "format": "uri"
        },
        "dataSourceLinks": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          }
        },
        "thumbnail": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "InsightPutRequest": {
      "type": "object",
      "required": [
        "body",
        "title"
      ],
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "sourceLink": {
          "type": "string",
          "format": "uri"
        },
        "dataSourceLinks": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          }
        },
        "thumbnail": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "InsightSummaryResponse": {
      "type": "object",
      "required": [
        "author",
        "body",
        "created",
        "id",
        "title",
        "updated",
        "version"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "author": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "version": {
          "type": "string"
        },
        "body": {
          "$ref": "#/definitions/InsightBody"
        },
        "sourceLink": {
          "type": "string",
          "format": "uri"
        },
        "dataSourceLinks": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          }
        },
        "thumbnail": {
          "type": "string",
          "format": "uri"
        },
        "created": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        }
      }
    },
    "Instant": {
      "type": "object",
      "properties": {
        "nano": {
          "type": "integer",
          "format": "int32"
        },
        "epochSecond": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "JsonNode": {
      "type": "object",
      "properties": {
        "boolean": {
          "type": "boolean",
          "default": false
        },
        "int": {
          "type": "boolean",
          "default": false
        },
        "bigDecimal": {
          "type": "boolean",
          "default": false
        },
        "bigInteger": {
          "type": "boolean",
          "default": false
        },
        "double": {
          "type": "boolean",
          "default": false
        },
        "long": {
          "type": "boolean",
          "default": false
        },
        "valueNode": {
          "type": "boolean",
          "default": false
        },
        "containerNode": {
          "type": "boolean",
          "default": false
        },
        "missingNode": {
          "type": "boolean",
          "default": false
        },
        "object": {
          "type": "boolean",
          "default": false
        },
        "pojo": {
          "type": "boolean",
          "default": false
        },
        "integralNumber": {
          "type": "boolean",
          "default": false
        },
        "floatingPointNumber": {
          "type": "boolean",
          "default": false
        },
        "short": {
          "type": "boolean",
          "default": false
        },
        "textual": {
          "type": "boolean",
          "default": false
        },
        "binary": {
          "type": "boolean",
          "default": false
        },
        "float": {
          "type": "boolean",
          "default": false
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "number": {
          "type": "boolean",
          "default": false
        },
        "array": {
          "type": "boolean",
          "default": false
        },
        "null": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "LinkedDatasetCreateOrUpdateRequest": {
      "type": "object",
      "required": [
        "id",
        "owner"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "LinkedDatasetSummaryResponse": {
      "type": "object",
      "required": [
        "accessLevel",
        "created",
        "id",
        "owner",
        "title",
        "updated",
        "visibility"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "version": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "CC-BY-IGO",
            "CC-BY 3.0",
            "CC-BY 3.0 AU",
            "CC-BY 3.0 IGO",
            "CC-BY-SA",
            "CC-BY-SA 3.0",
            "CDLA-Sharing-1.0",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-ND 3.0",
            "CC-BY 3.0 NZ",
            "CC-BY-NC 3.0",
            "CC-BY-SA 3.0",
            "CC BY-NC-ND",
            "CC-BY-NC-SA 3.0",
            "CC-BY-SA 3.0 NZ",
            "CC-BY-NC-SA 3.0 NZ",
            "CC-BY-NC 3.0 NZ",
            "CC-BY-NC-ND-NZ-3.0",
            "CC BY-NC-SA",
            "CC-BY-NC-SA 3.0",
            "Italian-ODL",
            "MIT License",
            "OGL",
            "OGL-Canada",
            "OGL-Nova Scotia",
            "OGL-UK",
            "OSODL",
            "ODC-BY",
            "ODC-ODbL",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        },
        "created": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        },
        "accessLevel": {
          "type": "string",
          "enum": [
            "NONE",
            "DISCOVER",
            "READ",
            "WRITE",
            "ADMIN"
          ]
        }
      }
    },
    "MetadataResourceDto": {
      "type": "object",
      "required": [
        "created",
        "id",
        "owner",
        "visibility"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "table": {
          "$ref": "#/definitions/TableId"
        },
        "category": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "rootParentType": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "visibility": {
          "type": "string",
          "enum": [
            "DISCOVERABLE",
            "OPEN",
            "PRIVATE"
          ]
        },
        "url": {
          "type": "string",
          "format": "uri"
        },
        "created": {
          "type": "string",
          "format": "date-time"
        },
        "updated": {
          "type": "string",
          "format": "date-time"
        },
        "collections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CatalogId"
          }
        },
        "relationshipTypes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "externalUrls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assetStatus": {
          "$ref": "#/definitions/AssetStatus"
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        }
      }
    },
    "OauthTokenReference": {
      "type": "object",
      "required": [
        "id",
        "owner",
        "site"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "site": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "uuid"
        }
      }
    },
    "PaginatedDatasetResults": {
      "type": "object",
      "required": [
        "count",
        "records"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetSummaryResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "PaginatedInsightResults": {
      "type": "object",
      "required": [
        "count",
        "records"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/InsightSummaryResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "PaginatedMetadataResourceResults": {
      "type": "object",
      "required": [
        "count",
        "records"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/MetadataResourceDto"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "PaginatedProjectResults": {
      "type": "object",
      "required": [
        "count",
        "records"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectSummaryResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "PaginatedQueryResults": {
      "type": "object",
      "required": [
        "count",
        "records"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/QuerySummaryResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "PaginatedSearchResultsDto": {
      "type": "object",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0
        },
        "records": {
          "type": "array",
          "items": {
            "type": "object"
          }
        },
        "next": {
          "type": "string"
        },
        "facets": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/SearchFacetResult"
            }
          }
        },
        "hydrations": {
          "$ref": "#/definitions/SearchHydrations"
        }
      }
    },
    "PaginatedSubscriptionResults": {
      "type": "object",
      "required": [
        "count",
        "records"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SubscriptionResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "PaginatedUserResults": {
      "type": "object",
      "required": [
        "count",
        "records"
      ],
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0.0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/UserDataResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      }
    },
    "ProjectCreateRequest": {
      "type": "object",
      "required": [
        "title",
        "visibility"
      ],
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "objective": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "CC-BY-IGO",
            "CC-BY 3.0",
            "CC-BY 3.0 AU",
            "CC-BY 3.0 IGO",
            "CC-BY-SA",
            "CC-BY-SA 3.0",
            "CDLA-Sharing-1.0",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-ND 3.0",
            "CC-BY 3.0 NZ",
            "CC-BY-NC 3.0",
            "CC-BY-SA 3.0",
            "CC BY-NC-ND",
            "CC-BY-NC-SA 3.0",
            "CC-BY-SA 3.0 NZ",
            "CC-BY-NC-SA 3.0 NZ",
            "CC-BY-NC 3.0 NZ",
            "CC-BY-NC-ND-NZ-3.0",
            "CC BY-NC-SA",
            "CC-BY-NC-SA 3.0",
            "Italian-ODL",
            "MIT License",
            "OGL",
            "OGL-Canada",
            "OGL-Nova Scotia",
            "OGL-UK",
            "OSODL",
            "ODC-BY",
            "ODC-ODbL",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "linkedDatasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        }
      }
    },
    "ProjectPatchRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        },
        "objective": {
          "type": "string"
        },
        "summary": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "CC-BY-IGO",
            "CC-BY 3.0",
            "CC-BY 3.0 AU",
            "CC-BY 3.0 IGO",
            "CC-BY-SA",
            "CC-BY-SA 3.0",
            "CDLA-Sharing-1.0",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-ND 3.0",
            "CC-BY 3.0 NZ",
            "CC-BY-NC 3.0",
            "CC-BY-SA 3.0",
            "CC BY-NC-ND",
            "CC-BY-NC-SA 3.0",
            "CC-BY-SA 3.0 NZ",
            "CC-BY-NC-SA 3.0 NZ",
            "CC-BY-NC 3.0 NZ",
            "CC-BY-NC-ND-NZ-3.0",
            "CC BY-NC-SA",
            "CC-BY-NC-SA 3.0",
            "Italian-ODL",
            "MIT License",
            "OGL",
            "OGL-Canada",
            "OGL-Nova Scotia",
            "OGL-UK",
            "OSODL",
            "ODC-BY",
            "ODC-ODbL",
            "Other"
          ]
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "linkedDatasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        }
      }
    },
    "ProjectPutRequest": {
      "type": "object",
      "required": [
        "title",
        "visibility"
      ],
      "properties": {
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "objective": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "CC-BY-IGO",
            "CC-BY 3.0",
            "CC-BY 3.0 AU",
            "CC-BY 3.0 IGO",
            "CC-BY-SA",
            "CC-BY-SA 3.0",
            "CDLA-Sharing-1.0",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-ND 3.0",
            "CC-BY 3.0 NZ",
            "CC-BY-NC 3.0",
            "CC-BY-SA 3.0",
            "CC BY-NC-ND",
            "CC-BY-NC-SA 3.0",
            "CC-BY-SA 3.0 NZ",
            "CC-BY-NC-SA 3.0 NZ",
            "CC-BY-NC 3.0 NZ",
            "CC-BY-NC-ND-NZ-3.0",
            "CC BY-NC-SA",
            "CC-BY-NC-SA 3.0",
            "Italian-ODL",
            "MIT License",
            "OGL",
            "OGL-Canada",
            "OGL-Nova Scotia",
            "OGL-UK",
            "OSODL",
            "ODC-BY",
            "ODC-ODbL",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/JsonNode"
          }
        },
        "linkedDatasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedDatasetCreateOrUpdateRequest"
          }
        }
      }
    },
    "ProjectSummaryResponse": {
      "type": "object",
      "required": [
        "accessLevel",
        "created",
        "id",
        "owner",
        "status",
        "title",
        "updated",
        "version",
        "visibility"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "minLength": 1,
          "maxLength": 60
        },
        "objective": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000
        },
        "version": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "license": {
          "type": "string",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "CDLA-Permissive-1.0",
            "CC-BY-IGO",
            "CC-BY 3.0",
            "CC-BY 3.0 AU",
            "CC-BY 3.0 IGO",
            "CC-BY-SA",
            "CC-BY-SA 3.0",
            "CDLA-Sharing-1.0",
            "CC BY-NC",
            "CC BY-ND",
            "CC BY-ND 3.0",
            "CC-BY 3.0 NZ",
            "CC-BY-NC 3.0",
            "CC-BY-SA 3.0",
            "CC BY-NC-ND",
            "CC-BY-NC-SA 3.0",
            "CC-BY-SA 3.0 NZ",
            "CC-BY-NC-SA 3.0 NZ",
            "CC-BY-NC 3.0 NZ",
            "CC-BY-NC-ND-NZ-3.0",
            "CC BY-NC-SA",
            "CC-BY-NC-SA 3.0",
            "Italian-ODL",
            "MIT License",
            "OGL",
            "OGL-Canada",
            "OGL-Nova Scotia",
            "OGL-UK",
            "OSODL",
            "ODC-BY",
            "ODC-ODbL",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ]
        },
        "status": {
          "type": "string",
          "enum": [
            "NEW",
            "INPROGRESS",
            "LOADED",
            "SYSTEMERROR"
          ]
        },
        "created": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        },
        "accessLevel": {
          "type": "string",
          "enum": [
            "NONE",
            "DISCOVER",
            "READ",
            "WRITE",
            "ADMIN"
          ]
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FileSummaryResponse"
          }
        },
        "properties": {
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "linkedDatasets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/LinkedDatasetSummaryResponse"
          }
        }
      }
    },
    "QueryExecutionDto": {
      "type": "object",
      "required": [
        "query"
      ],
      "properties": {
        "query": {
          "type": "string",
          "minLength": 1,
          "maxLength": 10000
        }
      }
    },
    "QueryParameter": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "datatype": {
          "type": "string"
        }
      }
    },
    "QueryPutRequest": {
      "type": "object",
      "required": [
        "content",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "minLength": 0,
          "maxLength": 128
        },
        "content": {
          "type": "string"
        },
        "published": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "QuerySummaryResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        },
        "language": {
          "type": "string",
          "enum": [
            "SPARQL",
            "SQL"
          ]
        },
        "name": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        },
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/QueryParameter"
          }
        }
      }
    },
    "RdfTerm": {
      "type": "object",
      "required": [
        "type",
        "value"
      ],
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "literal",
            "uri"
          ]
        },
        "value": {
          "type": "string"
        },
        "datatype": {
          "type": "string",
          "readOnly": true
        },
        "xml:lang": {
          "type": "string",
          "readOnly": true
        }
      }
    },
    "RelationshipCreateOrDeleteRequest": {
      "type": "object",
      "required": [
        "relationshipType",
        "sourceId",
        "sourceType",
        "targetId",
        "targetType"
      ],
      "properties": {
        "relationshipType": {
          "type": "string",
          "enum": [
            "USES_DATASET",
            "REFERENCE_BUSINESS_TERM",
            "RELATED_TO_BUSINESS_TERM",
            "USES_DATA_FROM"
          ]
        },
        "sourceDatasetId": {
          "type": "string",
          "description": "If source is a table or column, populate with dataset ID that contains table."
        },
        "sourceId": {
          "type": "string"
        },
        "sourceTableId": {
          "type": "string",
          "description": "If source is a column, populate with table ID that contains column."
        },
        "sourceType": {
          "type": "string",
          "enum": [
            "CATALOG",
            "ANALYSIS",
            "BUSINESS_TERM",
            "COLUMN",
            "DATA_TYPE",
            "DATASET",
            "PROJECT",
            "TABLE"
          ]
        },
        "targetDatasetId": {
          "type": "string",
          "description": "If target is a table or column, populate with dataset ID that contains table."
        },
        "targetId": {
          "type": "string"
        },
        "targetTableId": {
          "type": "string",
          "description": "If target is a column, populate with table ID that contains column."
        },
        "targetType": {
          "type": "string",
          "enum": [
            "CATALOG",
            "ANALYSIS",
            "BUSINESS_TERM",
            "COLUMN",
            "DATA_TYPE",
            "DATASET",
            "PROJECT",
            "TABLE"
          ]
        }
      }
    },
    "RelationshipGetRequest": {
      "type": "object",
      "required": [
        "resourceType"
      ],
      "properties": {
        "byResourceTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CATALOG",
              "ANALYSIS",
              "BUSINESS_TERM",
              "COLUMN",
              "DATA_TYPE",
              "DATASET",
              "PROJECT",
              "TABLE"
            ]
          }
        },
        "byRelationTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceType": {
          "type": "string",
          "enum": [
            "CATALOG",
            "ANALYSIS",
            "BUSINESS_TERM",
            "COLUMN",
            "DATA_TYPE",
            "DATASET",
            "PROJECT",
            "TABLE"
          ]
        }
      }
    },
    "RelationshipGetTableRequest": {
      "type": "object",
      "properties": {
        "byResourceTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CATALOG",
              "ANALYSIS",
              "BUSINESS_TERM",
              "COLUMN",
              "DATA_TYPE",
              "DATASET",
              "PROJECT",
              "TABLE"
            ]
          }
        },
        "byRelationTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourceRelationshipDto": {
      "type": "object",
      "properties": {
        "contributor": {
          "type": "boolean",
          "default": false
        },
        "liked": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "SavedQueryExecutionRequest": {
      "type": "object",
      "properties": {
        "parameters": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/RdfTerm"
          }
        },
        "includeTableSchema": {
          "type": "boolean",
          "default": false
        },
        "maxRows": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SearchFacetResult": {
      "type": "object",
      "properties": {
        "term": {
          "type": "string"
        },
        "count": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "SearchHydrations": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AgentHydrationDto"
          }
        },
        "catalogConcepts": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogConceptHydrationDto"
          }
        },
        "catalogs": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogHydrationDto"
          }
        },
        "catalogAnalysis": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogAnalysisHydrationDto"
          }
        },
        "catalogBusinessTerms": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogBusinessTermHydrationDto"
          }
        },
        "catalogTables": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogTableHydrationDto"
          }
        },
        "catalogColumns": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CatalogColumnHydrationDto"
          }
        },
        "datasets": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/DatasetHydrationDto"
          }
        },
        "insights": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/InsightHydrationDto"
          }
        }
      }
    },
    "SimpleSearchRequest": {
      "type": "object",
      "required": [
        "query"
      ],
      "properties": {
        "query": {
          "type": "string"
        },
        "owner": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "type": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "catalogAnalysis",
              "catalogBusinessTerm",
              "catalogDataset",
              "catalogDataType",
              "catalogTable",
              "collection",
              "comment",
              "dataset",
              "datatable",
              "file",
              "insight",
              "integration",
              "project",
              "query"
            ]
          }
        },
        "includeCommunityResults": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "SourceId": {
      "type": "object",
      "properties": {
        "agentid": {
          "type": "string"
        },
        "sourceid": {
          "type": "string"
        }
      }
    },
    "SqlQueryRequest": {
      "type": "object",
      "required": [
        "query"
      ],
      "properties": {
        "query": {
          "type": "string"
        },
        "includeTableSchema": {
          "type": "boolean",
          "default": false
        },
        "datasetVersions": {
          "type": "string"
        }
      }
    },
    "StreamSchema": {
      "type": "object",
      "properties": {
        "primaryKeyFields": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "maxItems": 10,
          "minItems": 1
        },
        "sequenceField": {
          "type": "string"
        }
      }
    },
    "StreamSchemaPatchRequest": {
      "type": "object",
      "required": [
        "updateMethod"
      ],
      "properties": {
        "updateMethod": {
          "type": "string",
          "enum": [
            "TRUNCATE"
          ]
        },
        "primaryKeyFields": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sequenceField": {
          "type": "string"
        }
      }
    },
    "StreamsResource": {
      "type": "object"
    },
    "Subscription": {
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "user": {
          "$ref": "#/definitions/UserIdentifier"
        },
        "dataset": {
          "$ref": "#/definitions/DatasetIdentifier"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ALL"
            ]
          }
        },
        "project": {
          "$ref": "#/definitions/DatasetIdentifier"
        }
      }
    },
    "SubscriptionApiLinks": {
      "type": "object",
      "required": [
        "self"
      ],
      "properties": {
        "self": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "SubscriptionCreateRequest": {
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ALL"
            ]
          },
          "maxItems": 50,
          "minItems": 1
        }
      }
    },
    "SubscriptionLinks": {
      "type": "object",
      "required": [
        "api"
      ],
      "properties": {
        "api": {
          "$ref": "#/definitions/SubscriptionApiLinks"
        }
      }
    },
    "SubscriptionResponse": {
      "type": "object",
      "required": [
        "events"
      ],
      "properties": {
        "dataset": {
          "$ref": "#/definitions/DatasetIdentifierResponse"
        },
        "project": {
          "$ref": "#/definitions/DatasetIdentifierResponse"
        },
        "user": {
          "$ref": "#/definitions/UserIdentifierResponse"
        },
        "events": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "ALL"
            ]
          }
        },
        "links": {
          "$ref": "#/definitions/SubscriptionLinks"
        }
      }
    },
    "SuccessMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "minLength": 0,
          "maxLength": 256
        }
      }
    },
    "TableId": {
      "type": "object",
      "required": [
        "owner",
        "sourceId",
        "tableId"
      ],
      "properties": {
        "owner": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        },
        "tableId": {
          "type": "string"
        }
      }
    },
    "TableMetadataSpecDto": {
      "type": "object",
      "properties": {
        "database": {
          "type": "string"
        },
        "schema": {
          "type": "string"
        },
        "tables": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tablePrefixes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tableTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "TABLE",
              "EXTERNAL_TABLE",
              "VIEW"
            ]
          }
        }
      }
    },
    "UserDataResponse": {
      "type": "object",
      "required": [
        "created",
        "id",
        "updated"
      ],
      "properties": {
        "avatarUrl": {
          "type": "string",
          "minLength": 0,
          "maxLength": 256
        },
        "displayName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 128
        },
        "id": {
          "type": "string"
        },
        "created": {
          "type": "string"
        },
        "updated": {
          "type": "string"
        }
      }
    },
    "UserIdentifier": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "UserIdentifierResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "WebAuthorization": {
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "type": "string",
          "minLength": 0,
          "maxLength": 50
        },
        "credentials": {
          "type": "string",
          "minLength": 1,
          "maxLength": 1024
        }
      }
    },
    "WebCredentials": {
      "type": "object",
      "required": [
        "user"
      ],
      "properties": {
        "user": {
          "type": "string",
          "minLength": 0,
          "maxLength": 1024
        },
        "password": {
          "type": "string",
          "minLength": 0,
          "maxLength": 1024
        }
      }
    }
  }
}