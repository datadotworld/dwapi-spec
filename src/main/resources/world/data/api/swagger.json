{
  "swagger": "2.0",
  "info": {
    "version": "0.6.0",
    "title": "data.world API",
    "termsOfService": "https://data.world/terms",
    "contact": {
      "name": "data.world",
      "url": "https://data.world",
      "email": "help@data.world"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "description": "data.world's mission is to build the most meaningful, collaborative, and abundant data resource in the world, so that people who work with data can solve problems faster.\nIn the context of that mission, this API ensures that our users are able to easily access data and manage their data projects regardless of system or tool preference.",
    "x-stoplight": {
      "id": "data-world/specs/data-world"
    }
  },
  "host": "api.data.world",
  "basePath": "/v0",
  "tags": [
    {
      "name": "datasets"
    },
    {
      "name": "download"
    },
    {
      "name": "uploads"
    },
    {
      "name": "sparql"
    },
    {
      "name": "sql"
    },
    {
      "name": "user"
    }
  ],
  "schemes": [
    "https"
  ],
  "paths": {
    "/download/{owner}/{id}" : {
      "get" : {
        "tags" : [ "download" ],
        "summary" : "Download dataset",
        "description" : "This endpoint will return a .zip of all files within the dataset.\"",
        "operationId" : "downloadDataset",
        "produces" : [ "application/zip" ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/file_download/{owner}/{id}/{file}" : {
      "get" : {
        "tags" : [ "download" ],
        "summary" : "Download file",
        "description" : "This endpoint will return the file from the latest dataset version.",
        "operationId" : "downloadFile",
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/file"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/sparql/{owner}/{id}" : {
      "get" : {
        "tags" : [ "sparql" ],
        "summary" : "SPARQL query (via GET)",
        "description" : "This endpoint executes SPARQL queries against a dataset.\nNew to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .",
        "operationId" : "sparqlGet",
        "produces": [
          "text/csv", "application/sparql-results+xml", "application/sparql-results+json", "text/tab-separated-values"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "sparql" ],
        "summary" : "SPARQL query",
        "description" : "This endpoint executes SPARQL queries against a dataset.\nNew to SPARQL? Check out data.world's [SPARQL tutorial](https://docs.data.world/tutorials/sparql/) .",
        "operationId" : "sparqlPost",
        "produces": [
          "text/csv", "application/sparql-results+xml", "application/sparql-results+json", "text/tab-separated-values"
        ],
        "consumes" : [ "application/x-www-form-urlencoded"],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/formQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/sql/{owner}/{id}" : {
      "get" : {
        "tags" : [ "sql" ],
        "summary" : "SQL query (via GET)",
        "description" : "This endpoint executes SQL queries against a dataset.\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId" : "sqlGet",
        "produces": [
          "text/csv" , "application/json-l", "application/x-ndjson"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/query"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "sql" ],
        "summary" : "SQL query",
        "description" : "This endpoint executes SQL queries against a dataset.\nNew to SQL? Check out data.world's [SQL manual](https://docs.data.world/tutorials/dwsql/) .",
        "operationId" : "sqlPost",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces": [
          "text/csv" , "application/json-l", "application/x-ndjson"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "$ref": "#/parameters/formQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "__OK__\nThe request has succeeded."
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security" : [ {
          "token" : [ ]
        } ]
      }
    },
    "/datasets/{owner}": {
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Create a dataset",
        "operationId": "createDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetCreateRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"title\": \"data.world basketball team\",\r\n  \"description\": \"Fake data.world basketball team players and stats\",\r\n  \"summary\": \"This dataset involves some fake information about the totally fake data.world intramural basketball team.\",\r\n  \"tags\": [\r\n    \"sports\", \"datadotworld\", \"basketball\"\r\n  ],\r\n  \"license\": \"PDDL\",\r\n  \"visibility\": \"OPEN\",\r\n  \"files\": [\r\n    {\r\n      \"name\": \"DataDotWorldBBallTeam.csv\",\r\n      \"source\": {\r\n        \"url\": \"https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv\"\r\n      },\r\n      \"description\": \"Stats about about our purely fictitious basketball team\",\r\n      \"labels\": [\r\n        \"raw data\", \"clean data\"\r\n      ]\r\n    }\r\n  ]\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/CreateDatasetResponse"
            },
            "examples": {
              "application/json": "{\r\n  \"message\": \"Dataset has been successfully created. Sync in progress.\",\r\n  \"uri\": \"https://data.world/jonloyens/an-intro-to-dataworld-dataset\"\r\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "409": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**CONFLICT**\nThe request could not be completed due to a conflict with the current state of the resource.\nFor example, this may occur for a short period of time after deleting a dataset with the same datasetId as the dataset being created."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "description": "Easily create a dataset and add metadata and files at the same time via the API."
      }
    },
    "/datasets/{owner}/{id}": {
      "delete": {
        "tags": [
          "datasets"
        ],
        "operationId": "deleteDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset has been successfully deleted.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Permanently deletes a dataset and all data associated with it. This operation cannot be undone, although a new dataset may be created with the same id.",
        "summary": "Delete a dataset"
      },
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Retrieve a dataset",
        "operationId": "getDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/DatasetSummaryResponse"
            },
            "examples": {
              "application/json": "{\r\n  \"owner\": \"sya\",\r\n  \"id\": \"trumpworld\",\r\n  \"title\": \"TrumpWorld\",\r\n  \"description\": \"TrumpWorld Data\",\r\n  \"summary\": \"From the Buzzfeed article [Help Us Map TrumpWorld](https://www.buzzfeed.com/johntemplon/help-us-map-trumpworld)\\n>No American president has taken office with a giant network of businesses, investments, and corporate connections like that amassed by Donald J. Trump. His family and advisers have touched a staggering number of ventures, from a hotel in Azerbaijan to a poker company in Las Vegas.\\n\\n\\nCheck out the data.world docs on how to Upload & sync files from [**Google Sheets**](https://docs.data.world/documentation/api/googleSync.html) and [**Github**](https://docs.data.world/documentation/api/githubSync.html)   \\n\\n\\nSource: [github.com/BuzzFeedNews](https://github.com/BuzzFeedNews/trumpworld/tree/master/data)   \\n\\n_If you have suggestions for expanding or improving the dataset, please email trump@buzzfeed.com. If you’d like to send your tip securely and anonymously, see these [instructions](https://tips.buzzfeed.com/)._\",\r\n  \"tags\": [\r\n    \"trump\",\r\n    \"trump world\",\r\n    \"president\",\r\n    \"connections\",\r\n    \"swamp\",\r\n    \"business network\"\r\n  ],\r\n  \"visibility\": \"OPEN\",\r\n  \"files\": [\r\n    {\r\n      \"name\": \"org-org-connections.csv\",\r\n      \"sizeInBytes\": 97658,\r\n      \"source\": {\r\n        \"id\": \"bfbac3bb-9cec-410a-9ac4-c904a56d65fe\",\r\n        \"url\": \"https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/org-org-connections.csv\",\r\n        \"syncStatus\": \"OK\",\r\n        \"lastSyncStart\": \"2017-02-06T22:55:15.242Z\",\r\n        \"lastSyncSuccess\": \"2017-02-06T22:55:15.258Z\",\r\n        \"lastSyncFailure\": \"2017-02-01T23:47:47.667Z\"\r\n      },\r\n      \"created\": \"2017-02-01T23:45:12.379Z\",\r\n      \"updated\": \"2017-02-03T16:05:03.241Z\"\r\n    },\r\n    {\r\n      \"name\": \"person-org-connections.csv\",\r\n      \"sizeInBytes\": 231637,\r\n      \"source\": {\r\n        \"id\": \"91cf66e3-4bd7-422f-a8ec-7de1b68f8ee1\",\r\n        \"url\": \"https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-org-connections.csv\",\r\n        \"syncStatus\": \"OK\",\r\n        \"lastSyncStart\": \"2017-02-06T22:55:15.242Z\",\r\n        \"lastSyncSuccess\": \"2017-02-06T22:55:15.310Z\"\r\n      },\r\n      \"created\": \"2017-02-01T23:51:02.777Z\",\r\n      \"updated\": \"2017-02-03T16:05:03.241Z\"\r\n    },\r\n    {\r\n      \"name\": \"person-person-connections.csv\",\r\n      \"sizeInBytes\": 32556,\r\n      \"source\": {\r\n        \"id\": \"b1e0659b-c282-408a-893a-14b5e5a1ae4c\",\r\n        \"url\": \"https://raw.githubusercontent.com/BuzzFeedNews/trumpworld/master/data/person-person-connections.csv\",\r\n        \"syncStatus\": \"OK\",\r\n        \"lastSyncStart\": \"2017-02-06T22:55:15.242Z\",\r\n        \"lastSyncSuccess\": \"2017-02-06T22:55:15.361Z\"\r\n      },\r\n      \"created\": \"2017-02-01T23:51:32.492Z\",\r\n      \"updated\": \"2017-02-03T16:05:03.241Z\"\r\n    }\r\n  ],\r\n  \"status\": \"LOADED\",\r\n  \"created\": \"2017-02-01T22:33:58.809Z\",\r\n  \"updated\": \"2017-02-06T22:55:19.128Z\"\r\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Return details on the dataset."
      },
      "put": {
        "tags": [
          "datasets"
        ],
        "operationId": "replaceDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetPutRequest"
            },
            "x-examples": {
              "application/json": "{\n  \"description\": \"2017 data.world basketball program\",\n  \"summary\": \"Fake data.world basketball team players and stats. Includes 2016 and 2017 team\",\n  \"tags\": [\n    \"basketball\"\n  ],\n  \"visibility\": \"OPEN\",\n  \"files\": [\n    {\n      \"name\": \"DataDotWorld2017BBallTeam.csv\",\n      \"source\": {\n        \"url\": \"https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv\"\n      },\n      \"description\": \"Purely fictitious performance data on our purely fictitious data.world basketball team.\",\n      \"labels\": [\n        \"raw data\", \"clean data\"\n      ]\n    }\n  ]\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset has been successfully replaced.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "consumes": [
          "application/json"
        ],
        "description": "Create a dataset with a given id or completely rewrite the dataset, including any previously added files, if one already exists with the given id",
        "summary": "Create / Replace a dataset"
      },
      "patch": {
        "tags": [
          "datasets"
        ],
        "summary": "Update a dataset",
        "operationId": "patchDataset",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DatasetPatchRequest"
            },
            "x-examples": {
              "application/json": "{\r\n  \"description\": \"2017 data.world basketball program\",\r\n  \"summary\": \"Fake data.world basketball team players and stats. Includes 2016 and 2017 team\",\r\n  \"tags\": [\r\n    \"basketball\"\r\n  ],\r\n  \"files\": [\r\n    {\r\n      \"name\": \"DataDotWorld2017BBallTeam.csv\",\r\n      \"source\": {\r\n        \"url\": \"https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv\"\r\n      },\r\n      \"description\": \"Purely fictitious performance data on our purely fictitious data.world basketball team.\",\r\n      \"labels\": [\r\n        \"raw data\", \"clean data\"\r\n      ]\r\n    }\r\n  ]\r\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset successfully updated.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Update an existing dataset. Note that we only update the elements or files included in the request. All omitted elements or files will remain untouched.",
        "consumes": [
          "application/json"
        ]
      }
    },
    "/datasets/{owner}/{id}/files": {
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Add files",
        "operationId": "addFilesBySource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FileBatchUpdateRequest"
            },
            "x-examples": {
              "application/json": "{\n  \"files\": [\n    {\n      \"name\": \"DataDotWorldBBallTeam.csv\",\n      \"source\": {\n        \"url\": \"https://docs.google.com/spreadsheets/d/1UheyB6pxTCfLpRmIGITM0fKb8jHVEvPuajmuejxxRyE/pub?gid=1371600687&single=true&output=csv\"\n      },\n      \"description\": \"Purely fictitious performance data on our purely fictitious data.world basketball team.\",\n      \"labels\": [\n        \"raw data\",\n        \"clean data\"\n      ]\n    },\n    {\n      \"name\": \"DataDotWorldBBallStats.csv\",\n      \"source\": {\n        \"url\": \"https://raw.githubusercontent.com/rebeccaclay/test-repo/master/DataDotWorldBBallStats.csv\"\n      },\n      \"description\": \"Stats about about our purely fictitious basketball team\",\n      \"labels\": [\n        \"raw data\",\n        \"clean data\"\n      ]\n    }\n  ]\n}"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset has been successfully updated with new sources. Sync in progress.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "This method allows files published on the web to be added to a data.world dataset via their URL. The source URL will be stored so you can easily update your file anytime it changes via the *fetch latest* link on the [data.world](https://data.world/) dataset page or by triggering the GET:/sync endpoint."
      },
      "delete": {
        "tags": [
          "datasets"
        ],
        "summary": "Delete files",
        "operationId": "deleteFilesAndSyncSources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "name": "name",
            "in": "query",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi",
            "description": "Names of files to be deleted. Multiple can be provided in a single request by repeating the query string parameter name as many times as necessary.",
            "uniqueItems": true
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset files have been successfully deleted.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Delete one or more files from a dataset by their name, including files added via URL."
      }
    },
    "/datasets/{owner}/{id}/files/{name}": {
      "delete": {
        "tags": [
          "datasets"
        ],
        "summary": "Delete a file",
        "operationId": "deleteFileAndSyncSource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "name": "name",
            "in": "path",
            "description": "Name and unique idenfiier of file within the dataset.",
            "required": true,
            "type": "string",
            "maxItems": 128,
            "minItems": 1
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Dataset file has been successfully deleted.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Delete a single file from a dataset by their name, including files added via URL."
      }
    },
    "/datasets/{owner}/{id}/sync": {
      "get": {
        "tags": [
          "datasets"
        ],
        "summary": "Sync files (via GET)",
        "operationId": "syncViaGet",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Sync started.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Update all files within a dataset that have originally been added via URL (e.g. via /datasets endpoints or on data.world)."
      },
      "post": {
        "tags": [
          "datasets"
        ],
        "summary": "Sync files",
        "operationId": "sync",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"Sync started.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Update all files within a dataset that have originally been added via URL (e.g. via /datasets endpoints or on data.world)."
      }
    },
    "/uploads/{owner}/{id}/files": {
      "post": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload files",
        "description": "Upload multiple files at once to a dataset via multipart request.\nSwagger clients will limit this method of upload to one file at a time. Other HTTP clients capable of making multipart/form-data requests can be used to upload multiple files in a single request.",
        "operationId": "uploadFiles",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "name": "file",
            "in": "formData",
            "description": "Multipart-encoded file contents",
            "required": true,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"File(s) uploaded.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "413": {
            "description": "**PAYLOAD TOO LARGE**\nThe server is refusing to process a request because the request payload is larger than the server is willing or able to process.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/uploads/{owner}/{id}/files/{name}": {
      "put": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload file",
        "description": "This method of upload is not supported by Swagger clients. Other HTTP clients can be used to supply the contents of the file directly in the body of the request",
        "operationId": "uploadFile",
        "consumes": [
          "application/octet-stream",
          "*/*"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/owner"
          },
          {
            "$ref": "#/parameters/datasetId"
          },
          {
            "name": "name",
            "in": "path",
            "description": "File name and unique identifier within dataset.",
            "required": true,
            "type": "string",
            "maxItems": 128,
            "minItems": 1
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/SuccessMessage"
            },
            "examples": {
              "application/json": "{\n  \"message\": \"File uploaded.\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "413": {
            "description": "**PAYLOAD TOO LARGE**\nThe server is refusing to process a request because the request payload is larger than the server is willing or able to process.",
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            }
          },
          "422": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNPROCESSABLE ENTITY**\nThe server understands the content type of the request entity and the syntax of the request entity is correct, but was unable to process the contained instructions.\nFor example, this error may occur if the JSON body of the request doesn't match the expected schema."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/user": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user data",
        "operationId": "getUserData",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/UserDataResponse"
            },
            "examples": {
              "application/json": "{\n    \"avatarUrl\": \"https://cdn.filepicker.io/api/file/m0Y31H2NRq6byi22ApUs\",\n    \"displayName\": \"Rafael Pereira\",\n    \"id\": \"rflprr\",\n    \"created\": \"2016-06-13T22:38:29.412Z\",\n    \"updated\": \"2017-01-31T17:01:49.847Z\"\n}"
            }
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Return profile information for the currently authenticated user."
      }
    },
    "/user/datasets/contributing": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List dataset as contributor",
        "operationId": "fetchContributingDatasets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            },
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Fetch datasets that the currently authenticated user has access to because he or she is a contributor."
      }
    },
    "/user/datasets/liked": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List liked datasets",
        "operationId": "fetchLikedDatasets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            },
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Fetch datasets that the currently authenticated user likes."
      }
    },
    "/user/datasets/own": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "List datasets as owner",
        "operationId": "fetchDatasets",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/next"
          },
          {
            "$ref": "#/parameters/sort"
          }
        ],
        "responses": {
          "200": {
            "description": "**OK**\nThe request has succeeded.",
            "schema": {
              "$ref": "#/definitions/PaginatedDatasetResults"
            },
            "examples": {
              "application/json": "{\n  \"count\": 2,\n  \"records\": [\n    {\n      \"owner\": \"bryonjacob\",\n      \"id\": \"f-o-o\",\n      \"title\": \"f-o-o\",\n      \"description\": \"why do my datasets have to be at least 5 chars in length\",\n      \"tags\": [],\n      \"license\": \"CC-0\",\n      \"visibility\": \"PRIVATE\",\n      \"files\": [\n        {\n          \"name\": \"foo.csv\",\n          \"sizeInBytes\": 56,\n          \"created\": \"2016-06-09T21:56:06.943Z\",\n          \"updated\": \"2016-06-09T21:56:06.943Z\"\n        }\n      ],\n      \"status\": \"LOADED\",\n      \"created\": \"2016-06-09T21:55:58.002Z\",\n      \"updated\": \"2017-04-19T15:35:30.791Z\"\n    },\n    {\n      \"owner\": \"eric-capps\",\n      \"id\": \"zooblesnarb\",\n      \"title\": \"zooblesnarb\",\n      \"description\": \"test\",\n      \"tags\": [\n        \"bap\"\n      ],\n      \"visibility\": \"OPEN\",\n      \"files\": [],\n      \"created\": \"2016-11-02T21:18:58.696Z\",\n      \"updated\": \"2016-11-11T16:56:30.714Z\"\n    }\n  ],\n  \"next\": \"eyJyZXNvdXJjZSI6eyJzIjoiZGF0YXNldDplcmljLWNhcHBzL3pvb2JsZXNuYXJiIn0sInBhcnR5Ijp7InMiOiJhZ2VudDp1c2VyOCJ9fQ==\"\n}"
            }
          },
          "400": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**BAD REQUEST**\nThe server cannot or will not process the request due to something that is perceived to be a client error.\nFor example, this error may occur when the request doesn’t satisfy validation rules. See response for additional details."
          },
          "401": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**UNAUTHORIZED**\nThe request has not been applied because it lacks valid authentication credentials for the target resource.\nFor example, this may occur if a token is invalid or hasn’t been provided. Make sure that you have a valid token and that is provided via the `Authorization` header including the `Bearer` prefix. For example, if your token is `xyz`, your header should be `Authorization: Bearer xyz`."
          },
          "403": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**FORBIDDEN**\nThe server understood the request but refuses to authorize it.\nFor example, this error may occur you are not authorized to perform this operation."
          },
          "404": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**NOT FOUND**\nThe origin server did not find a current representation for the target resource or is not willing to disclose that one exists.\nFor example, this error may occur when the URL is invalid."
          },
          "500": {
            "schema": {
              "$ref": "#/definitions/ErrorMessage"
            },
            "description": "**INTERNAL SERVER ERROR**\nThe server encountered an unexpected condition that prevented it from fulfilling the request."
          }
        },
        "security": [
          {
            "token": []
          }
        ],
        "description": "Fetch datasets that the currently authenticated user has access to because he or she is the owner of the dataset."
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "definitions": {
    "DatasetCreateRequest": {
      "type": "object",
      "title": "Dataset Create Request",
      "properties": {
        "title": {
          "type": "string",
          "minLength": 0,
          "maxLength": 60,
          "description": "Dataset name."
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120,
          "description": "Short dataset description."
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000,
          "description": "Long-form dataset summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*"
          }
        },
        "license": {
          "type": "string",
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "ODC-BY",
            "CC-BY-SA",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-NC-SA",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Initial set of files. At dataset creation time, file uploads are not supported. However, this property can be used to add files via URL.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        }
      },
      "required": [
        "title",
        "visibility"
      ]
    },
    "DatasetPatchRequest": {
      "type": "object",
      "title": "Dataset Update Request",
      "properties": {
        "title" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 60,
          "description": "Dataset name."
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120,
          "description": "Short dataset description."
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000,
          "description": "Long-form dataset summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*"
          }
        },
        "license": {
          "type": "string",
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "ODC-BY",
            "CC-BY-SA",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-NC-SA",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Updated set of files. At dataset update time, file uploads are not supported. However, this property can be used to add files via URL or update metadata related to existing files.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          }
        }
      }
    },
    "DatasetPutRequest": {
      "type": "object",
      "title": "Dataset Replace Request",
      "properties": {
        "title" : {
          "type" : "string",
          "minLength" : 0,
          "maxLength" : 60,
          "description": "Dataset name."
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120,
          "description": "Short dataset description."
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000,
          "description": "Long-form dataset summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*"
          }
        },
        "license": {
          "type": "string",
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "ODC-BY",
            "CC-BY-SA",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-NC-SA",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Initial set of files. At dataset creation time, file uploads are not supported. However, this property can be used to add files via URL.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileCreateRequest"
          }
        }
      },
      "required": [
        "visibility"
      ]
    },
    "DatasetSummaryResponse": {
      "type": "object",
      "title": "Dataset Summary Response",
      "properties": {
        "owner": {
          "type": "string",
          "description": "User name and unique identifier of the creator of the dataset."
        },
        "id": {
          "type": "string",
          "description": "Unique identifier of dataset."
        },
        "title": {
          "type": "string",
          "minLength": 0,
          "maxLength": 60,
          "description": "Dataset name."
        },
        "description": {
          "type": "string",
          "minLength": 0,
          "maxLength": 120,
          "description": "Short dataset description."
        },
        "summary": {
          "type": "string",
          "minLength": 0,
          "maxLength": 25000,
          "description": "Long-form dataset summary (Markdown supported)."
        },
        "tags": {
          "type": "array",
          "description": "Dataset tags. Letters numbers and spaces only (max 25 characters).",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "maxLength": 25,
            "pattern": "^[a-zA-Z0-9\\s]*"
          }
        },
        "license": {
          "type": "string",
          "description": "Dataset license. Find additional info for allowed values [here](https://data.world/license-help).",
          "enum": [
            "Public Domain",
            "PDDL",
            "CC-0",
            "CC-BY",
            "ODC-BY",
            "CC-BY-SA",
            "ODC-ODbL",
            "CC BY-NC",
            "CC BY-NC-SA",
            "Other"
          ]
        },
        "visibility": {
          "type": "string",
          "enum": [
            "OPEN",
            "PRIVATE"
          ],
          "description": "Dataset visibility. `OPEN` if the dataset can be seen by any member of data.world. `PRIVATE` if the dataset can be seen by its owner and authorized collaborators."
        },
        "files": {
          "type": "array",
          "description": "Initial set of files. At dataset creation time, file uploads are not supported. However, this property can be used to add files via URL.",
          "uniqueItems": false,
          "items": {
            "$ref": "#/definitions/FileSummaryResponse"
          }
        },
        "status": {
          "type": "string",
          "enum": [
            "NEW",
            "INPROGRESS",
            "LOADED",
            "SYSTEMERROR"
          ],
          "description": "Processing status of dataset.  This status can be checked periodically after changes are made to the dataset to determine the status of asynchronous processing.\n\n* `NEW`: Just created. Not yet processed.\n* `INPROGRESS`: Currently being processed.\n* `LOADED`: Successfully processed.\n* `SYSTEMERROR`: Error state due to processing failure."
        },
        "created": {
          "type": "string",
          "description": "Date and time when the dataset was created."
        },
        "updated": {
          "type": "string",
          "description": "Date and time when the dataset was last updated."
        },
        "isProject" : {
          "type": "boolean",
          "description": "Flag indicating if the dataset is also a project."
        },
        "accessLevel": {
          "type": "string",
          "enum": [
            "NONE",
            "DISCOVER",
            "READ",
            "WRITE",
            "ADMIN"
          ],
          "description": "The level of access the authenticated user is allowed with respect to dataset: \n\n*`NONE` Not allowed anything. \n*`DISCOVER` Allowed to know the dataset exists.. \n* `READ` Allowed to view and download dataset files, in addition to what DISCOVER allows. \n* `WRITE` Allowed to update data and metadata, in addition to what READ allows. \n* `ADMIN` Allowed to delete and manage access, in addition to what WRITE allows."
        }
      },
      "required": [
        "owner",
        "id",
        "title",
        "visibility",
        "status",
        "created",
        "updated",
        "isProject",
        "accessLevel"
      ]
    },
    "ErrorMessage": {
      "type": "object",
      "title": "Error Message Response",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32",
          "readOnly": true,
          "description": "HTTP Error Code"
        },
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "Human-readable error message."
        },
        "details": {
          "type": "string",
          "readOnly": true,
          "description": "Underlying error cause."
        }
      }
    },
    "FileBatchUpdateRequest": {
      "type": "object",
      "title": "File Create or Update Batch",
      "properties": {
        "files": {
          "type": "array",
          "description": "Updated set of files. When updating a set of files, file uploads are not supported. However, this property can be used to add files via URL or update metadata related to existing files.",
          "items": {
            "$ref": "#/definitions/FileCreateOrUpdateRequest"
          }
        }
      }
    },
    "FileCreateOrUpdateRequest": {
      "type": "object",
      "title": "File Create Or Update Request",
      "description": "This model is utilized where sets of files can be specified to be added or updated (e.g. `PATCH:/dataset/{owner}` and `POST:/dataset/{owner}/{id}/files`).",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "pattern": "^[^/]+$",
          "description": "File name. Should include type extension always when possible. Must not include slashes."
        },
        "source": {
          "$ref": "#/definitions/FileSourceCreateOrUpdateRequest"
        },
        "description": {
          "type": "string",
          "description": "File description.",
          "minLength": 1,
          "maxLength": 240
        },
        "labels": {
          "type": "array",
          "description": "File labels.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "raw data",
              "documentation",
              "visualization",
              "clean data",
              "script",
              "report"
            ]
          }
        }
      },
      "required": [
        "name"
      ]
    },
    "FileCreateRequest": {
      "type": "object",
      "title": "File Create Request",
      "description": "This model is utilized where sets of files can be specified only to be added (e.g. `POST:/dataset/{owner}`).",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "pattern": "^[^/]+$",
          "description": "File name. Should include type extension always when possible. Must not include slashes."
        },
        "source": {
          "$ref": "#/definitions/FileSourceCreateRequest"
        },
        "description": {
          "type": "string",
          "description": "File description.",
          "minLength": 1,
          "maxLength": 240
        },
        "labels": {
          "type": "array",
          "description": "File labels.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "raw data",
              "documentation",
              "visualization",
              "clean data",
              "script",
              "report"
            ]
          }
        }
      },
      "required": [
        "name",
        "source"
      ]
    },
    "FileSourceCreateOrUpdateRequest": {
      "type": "object",
      "title": "File Source Create Or Update Request",
      "description": "This model is utilized where source URLs can be specified for files to be added or updated.",
      "properties": {
        "url": {
          "type": "string",
          "description": "Source URL of file. Must be an http or https URL.",
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^https?.*"
        }
      },
      "required": [
        "url"
      ]
    },
    "FileSourceCreateRequest": {
      "type": "object",
      "required": [
        "url"
      ],
      "properties": {
        "url": {
          "type": "string",
          "description": "Source URL of file. Must be an http or https URL.",
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^https?.*"
        }
      },
      "description": "This model is utilized where source URLs can be specified for files only to be added.",
      "title": "File Create Request"
    },
    "FileSourceSummaryResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "Source URL of file. Must be an http or https URL.",
          "minLength": 1,
          "maxLength": 4096,
          "pattern": "^https?.*"
        },
        "syncStatus": {
          "type": "string",
          "enum": [
            "NEW",
            "INPROGRESS",
            "OK",
            "SYSTEMERROR"
          ],
          "description": "Synchronization status of the file.  This status can be checked periodically after changes are made to the dataset to determine the status of asynchronous syncronization.\n\n* `NEW`: Just created. Not yet synchronized.\n* `INPROGRESS`: Currently being synchronized.\n* `LOADED`: Successfully synchronized.\n* `SYSTEMERROR`: Error state due to synchronization failure."
        },
        "syncSummary": {
          "type": "string",
          "description": "Human-readable message detailing status of last failed sync."
        },
        "lastSyncStart": {
          "type": "string",
          "description": "Date and time when synchronization last started."
        },
        "lastSyncSuccess": {
          "type": "string",
          "description": "Date and time when synchronization last finished successfully."
        },
        "lastSyncFailure": {
          "type": "string",
          "description": "Date and time when synchronization last failed."
        }
      },
      "required": [
        "url",
        "syncStatus"
      ],
      "title": "File Source Response"
    },
    "FileSummaryResponse": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "minLength": 1,
          "maxLength": 128,
          "pattern": "^[^/]+$",
          "description": "File name. Should include type extension always when possible. Must not include slashes."
        },
        "source": {
          "$ref": "#/definitions/FileSourceSummaryResponse"
        },
        "description": {
          "type": "string",
          "description": "File description.",
          "minLength": 1,
          "maxLength": 240
        },
        "labels": {
          "type": "array",
          "description": "File labels.",
          "uniqueItems": true,
          "items": {
            "type": "string",
            "enum": [
              "raw data",
              "documentation",
              "visualization",
              "clean data",
              "script",
              "report"
            ]
          }
        },
        "sizeInBytes": {
          "type": "integer",
          "format": "int64"
        },
        "created": {
          "type": "string",
          "description": "Date and time when file was created."
        },
        "updated": {
          "type": "string",
          "description": "Date and time when file was last updated."
        }
      },
      "required": [
        "name",
        "created",
        "updated"
      ],
      "title": "File Response"
    },
    "SuccessMessage": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "minLength": 0,
          "maxLength": 256
        }
      },
      "title": "Success Message Response"
    },
    "UserDataResponse": {
      "type": "object",
      "title": "User Data Response",
      "properties": {
        "avatarUrl": {
          "type": "string",
          "minLength": 0,
          "maxLength": 256,
          "description": "URL of profile image."
        },
        "displayName": {
          "type": "string",
          "minLength": 0,
          "maxLength": 128,
          "description": "User's name."
        },
        "id": {
          "type": "string",
          "description": "User name and unique identifier."
        },
        "created": {
          "type": "string",
          "description": "Date and time when account was created."
        },
        "updated": {
          "type": "string",
          "description": "Date and time when account was last updated."
        }
      },
      "required": [
        "id",
        "created",
        "updated"
      ]
    },
    "CreateDatasetResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "minLength": 0,
          "maxLength": 256
        },
        "uri": {
          "type": "string"
        }
      },
      "title": "Dataset Create Response"
    },
    "PaginatedDatasetResults": {
      "type": "object",
      "title": "Paginated Dataset Results",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int32",
          "minimum": 0
        },
        "records": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DatasetSummaryResponse"
          }
        },
        "nextPageToken": {
          "type": "string"
        }
      },
      "required": [
        "count",
        "records"
      ]
    }
  },
  "security": [
    {
      "token": []
    }
  ],
  "parameters": {
    "owner": {
      "name": "owner",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "User name and unique identifier of the creator of the dataset.\nFor example, in the URL: [https://data.world/jonloyens/an-intro-to-dataworld-dataset](https://data.world/jonloyens/an-intro-to-dataworld-dataset), jonloyens is the unique identifier of the dataset."
    },
    "datasetId": {
      "name": "id",
      "in": "path",
      "type": "string",
      "required": true,
      "description": "Dataset unique identifier.  \nFor example, in the URL: [https://data.world/jonloyens/an-intro-to-dataworld-dataset](https://data.world/jonloyens/an-intro-to-dataworld-dataset), an-intro-to-dataworld-dataset is the unique identifier of the dataset."
    },
    "file": {
      "name": "file",
      "in": "path",
      "required": true,
      "type": "string"
    },
    "formQuery" : {
      "name": "query",
      "in": "formData",
      "required": false,
      "type": "string"
    },
    "query" : {
      "name": "query",
      "in": "query",
      "required": false,
      "type": "string"
    },
    "limit": {
      "name": "limit",
      "in": "query",
      "type": "string",
      "description": "Maximum number of items to include in a page of results."
    },
    "sort": {
      "name": "sort",
      "in": "query",
      "type": "string",
      "description": "Property name to sort by.\nPrefix with `+` for ascending order or with `-` for descending order. For example, `-created` will return items sorted by the `created` property in descending order."
    },
    "next": {
      "name": "next",
      "in": "query",
      "type": "string",
      "description": "Token from previous result page to be used when requesting a subsequent page."
    }
  }
}
